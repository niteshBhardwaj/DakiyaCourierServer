// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AppConfig {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  codCharges      CODCharges
  taxCharges      TaxCharges[]
  extraCharges    ExtraCharges[] // Diesel Price Hike (DPH)
  trackingRefresh TrackingRefresh
}

type TrackingRefresh {
  single Int // minutes
  all    Int // minutes
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName String?
  email    String? @unique

  // Phone number
  phone        String @unique
  phoneCountry String

  // Password
  passwordHash String

  // Social login
  socialLogin SocialLogin?

  //refresh tokens
  refreshTokens RefreshToken[]
  // Roles
  roles         Role           @default(USER)

  // User photo
  photo     String?
  thumbnail String?

  // Activation status
  active Boolean @default(false)

  // User type
  userType UserType @default(STANDARD)

  currentState CurrentState?

  // Created date
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  rateCardId    String?         @db.ObjectId
  RateCard      RateCard?       @relation(fields: [rateCardId], references: [id])
  Otp           Otp[]
  Wallet        Wallet[]
  Ticket        Ticket[]
  UserKYC       UserKYC[]       @relation("user")
  UserVerified  UserKYC[]       @relation("verifiedUser")
  BankDetails   BankDetails[]
  UploadedFiles UploadedFiles[]
  Order         Order[]
  PickupAddress PickupAddress[]
  DropAddress   DropAddress[]
  Transaction   Transaction[]
}

type CurrentState {
  isRequired Boolean
  state      CurrentStateType
}

enum CurrentStateType {
  PHONE
  EMAIL
  KYC
  ACCOUNT_DETAILS
}

type SocialLogin {
  googleProvider     String
  googleProviderId   String
  facebookProvider   String
  facebookProviderId String
}

enum UserType {
  STANDARD
  PREMIUM
  ADMIN
}

enum Role {
  USER
  ADMIN
}

type RefreshToken {
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  // user User @relation(fields: [userId], references: [id])
  // userId String @db.ObjectId
  token     String
  createdAt DateTime @default(now())
}

model UserKYC {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User ID
  user   User   @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  // KYC status
  status KYCStatus @default(Pending)

  // Full name
  fullName String?

  // Date of birth
  dateOfBirth DateTime?

  // Address
  address String?

  // Phone number
  phoneNumber String?

  // KYC type
  kycType KYCDocumentType?

  // Government ID number
  governmentIdNumber String?

  // Government ID photo
  governmentIdPhoto String?

  // Selfie photo
  selfiePhoto String?

  // Rejected reason
  rejectedReason String?

  kycDocuments KycDocument[]

  // Maximum allowed request attempts
  maxAttempts Int @default(6)

  // Number of OTP request attempts made
  attempts Int @default(0)

  request  Json?
  response Json?

  verifiedUser User?   @relation("verifiedUser", fields: [verifiedBy], references: [id], onDelete: Cascade)
  verifiedBy   String? @db.ObjectId

  // Created at
  createdAt DateTime @default(now())

  // Updated at
  updatedAt DateTime @default(now())
}

enum KYCDocumentType {
  AadhaarCard
  GSTIN
  Offline
}

type KycDocument {
  type   GovernmentIdType
  file   String
  status KycDocumentStatus @default(Pending)
}

enum KycDocumentStatus {
  Pending
  Approved
  Rejected
}

enum KYCStatus {
  Pending
  Skipped
  Verifying
  Approved
  Rejected
}

enum GovernmentIdType {
  AadhaarCard
  PANCard
  DrivingLicense
  Passport
}

model UploadedFiles {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String            @db.ObjectId
  isPrivate    Boolean
  fileId       String
  name         String
  size         Int
  filePath     String
  url          String
  fileType     String
  height       Int?
  width        Int?
  thumbnailUrl String?
  service      UploadServiceType @default(IMAGEKIT)
}

enum UploadServiceType {
  IMAGEKIT
}

model BankDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User ID
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String          @unique @db.ObjectId
  // Account type
  accountType BankDetailsType @default(Standard)

  status BankDetailsStatus @default(PENDING)

  // Account holder name
  accountHolderName String

  // Account number
  accountNumber String

  // Bank name
  bankName String

  // IFSC code
  IFSCCode String

  // UPI ID
  UPIId String?

  // Created at
  createdAt DateTime @default(now())

  // Updated at
  updatedAt DateTime @default(now())
}

enum BankDetailsStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BankDetailsType {
  Standard
  Premium
  Business
}

model Otp {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User ID
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  // OTP code
  code String

  // Contact identifier
  contactIdentifier String

  // Expiration time
  expirationTime DateTime // minutes

  // Maximum allowed OTP request attempts
  maxAttempts Int @default(3)

  // Number of OTP request attempts made
  attempts Int @default(0)

  // Timestamp of the last OTP request
  lastRequestTime DateTime @default(now())

  // Is verified
  isVerified Boolean @default(false)

  // User's IP address during the last OTP request
  lastRequestIP String?

  verificationType VerificationType @default(PHONE)

  usedFor UsedForType?
}

enum UsedForType {
  KYC
  CREATE_ACCOUNT
  LOGIN
}

enum VerificationType {
  EMAIL
  PHONE
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  pickupAddress PickupAddress @relation(fields: [pickupId], references: [id])
  pickupId      String        @db.ObjectId
  dropAddress   DropAddress   @relation(fields: [dropId], references: [id])
  dropId        String        @db.ObjectId
  // order id;
  orderId       String        @unique
  awb           String        @unique
  // Payment mode
  paymentMode   PaymentMode

  // Shipping mode
  shippingMode ShippingMode @default(Surface)

  // Weight
  weight Float

  // Is fragile?
  isFragile Boolean?

  // Box height
  boxHeight Int

  // Box width
  boxWidth Int

  // Box length
  boxLength Int

  // COD amount
  codAmount Int

  // Waybill number
  waybill String?

  // incoice number
  invoiceNo   String?
  // Total amount
  totalAmount Int

  //products
  products Products[]

  expectedDeliveryDate DateTime?

  reverseInTransit Boolean @default(false)

  status             OrderStatus
  currentStatusExtra CurrentStatusExtra?

  courierResponseJson Json?

  tracking Tracking[]
  Ticket   Ticket[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  courierId      String?         @db.ObjectId
  courierPartner CourierPartner? @relation(fields: [courierId], references: [id])
  Transaction    Transaction[]
}

enum OrderStatus {
  Manifested
  InTransit
  OutOfDelivery
  Delivered
  Cancelled
}

enum PaymentMode {
  Prepaid
  CashOnDelivery
}

enum ShippingMode {
  Air
  Surface
}

type Products {
  name     String
  quantity Int
  category String?
  amount   Int
  sku      String?
}

model PickupAddress {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  phone          String
  city           String
  pickupId       String           @unique
  name           String
  pincode        Int
  state          String
  address        String
  country        String
  email          String
  isDeleted      Boolean          @default(false)
  returnAddress  ReturnAddress?
  pickupProvider PickupProvider[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  Order          Order[]
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @db.ObjectId
}

model PickupProvider {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  courierPartner  CourierPartner @relation(fields: [courierId], references: [id])
  courierId       String         @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  pickupResponse  Json?
  PickupAddress   PickupAddress? @relation(fields: [pickupAddressId], references: [id])
  pickupAddressId String?        @db.ObjectId
}

type ReturnAddress {
  name    String?
  address String
  pincode Int
  city    String
  state   String
  country String
}

model DropAddress {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  phone     String
  city      String
  name      String
  pincode   Int
  address   String
  state     String
  country   String
  email     String
  isDeleted Boolean @default(false)
  Order     Order[]
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}

type CurrentStatusExtra {
  instructions String?
  status       String?
  location     String?
  dateTime     DateTime?
  type         String?
  lastChecked  DateTime?
}

model Tracking {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  Order        Order     @relation(fields: [orderId], references: [id])
  orderId      String    @db.ObjectId
  location     String?
  type         String?
  status       String?
  dateTime     DateTime?
  instructions String?
}

model Wallet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User ID
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  // Balance
  balance Int @default(0)

  // Currency
  currency String @default("INR")

  // Wallet type
  walletType WalletType @default(Personal)

  // Wallet status
  walletStatus WalletStatus @default(Active)

  // Transaction history
  transactions Transaction[]

  // Notes
  notes String?
}

enum WalletType {
  Personal
  Business
}

enum WalletStatus {
  Active
  Inactive
  Blocked
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Wallet ID
  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String @db.ObjectId

  //closing balance
  closingBalance Int
  // Amount
  amount Int

  // Transaction type
  transactionType TransactionType @default(Debit)

  // Description
  description String?

  // Created at
  createdAt DateTime @default(now())

  // Updated at
  updatedAt DateTime @default(now())

  reason TransationReason

  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String? @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

enum TransactionType {
  Credit
  Debit
  Transfer
}

type TransationReason {
  type      String
  id        String
  provider  String?
  extraInfo String?
}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User ID
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  // order ID
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String? @db.ObjectId

  // Ticket status
  ticketStatus TicketStatus @default(OPEN)

  // Ticket priority
  ticketPriority TicketPriority @default(Medium)

  // Ticket type
  ticketType TicketType @default(General)

  // Subject
  subject String

  // Description
  description String

  // Attachments
  attachments Attachment[]

  // Assigned to
  assignedTo String?

  // Notes
  notes String?

  // Channel
  channel ChannelType @default(IN_APP)

  // Due date
  dueDate DateTime?

  // Customer satisfaction rating
  customerSatisfactionRating Int?

  customerSatisfactionMessage String?

  // Agent feedback
  agentFeedback String?

  // Created at
  createdAt DateTime @default(now())

  // Updated at
  updatedAt DateTime @default(now())
}

enum ChannelType {
  IN_APP
  PHONE
  EMAIL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  Low
  Medium
  High
}

enum TicketType {
  General
  Shipment
  Payment
  Account
  Other
}

type Attachment {
  // File name
  fileName String

  // File size
  fileSize Int

  // File type
  fileType String

  // File content``
  fileContent String
}

model RateCard {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  tags String[]

  userRateCard UserRateCard[]
  codCharges   CODCharges? // Optional in case COD not applicable
  extraCharges ExtraCharges[]
  // Created at
  createdAt    DateTime       @default(now())
  // Updated at
  updatedAt    DateTime       @default(now())

  User User[]
}

type UserRateCard {
  title     String
  mode      ShippingMode @map("mode")
  type      String       @map("type")
  base      String
  increment String
  unit      Unit         @default(Kg)
  upto      String?
  rates     Rate[]
}

enum Zone {
  ZoneA // within the same city
  ZoneB // within same city and less than 500 kms
  ZoneC // When pick-up and delivery are done in metro cities
  ZoneD // a parcel within the same state
  ZoneE // When any or both pick-up and delivery is done in Rest of India except the North East and Jammu & Kashmir
  ZoneF // When any or both of pick-up and delivery is done in the North East region or Jammu and Kashmir
}

model Country {
  code   String   @id @map("_id")
  name   String
  tags   String[]
  Admin1 Admin1[]
}

model Admin1 {
  code        String    @id @map("_id")
  name        String
  countryCode String
  Country     Country   @relation(fields: [countryCode], references: [code])
  tags        String[]
  Admin2      Admin2[]
  Pincode     Pincode[]
}

model Admin2 {
  code       String    @id @map("_id")
  name       String
  admin1Code String
  Admin1     Admin1    @relation(fields: [admin1Code], references: [code])
  tags       String[]
  Pincode    Pincode[]
}

model Pincode {
  pincode            Int                   @id @map("_id")
  admin1Code         String
  Admin1             Admin1                @relation(fields: [admin1Code], references: [code])
  admin2Code         String
  Admin2             Admin2                @relation(fields: [admin2Code], references: [code])
  admin3Name         String?
  tags               String[]
  area               Area[]
  pincodeAvailablity PincodeAvailability[]
}

model Area {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  latitude  Float?
  longitude Float?
  accuracy  Int?
  Pincode   Pincode @relation(fields: [pincode], references: [pincode])
  pincode   Int
}

model PincodeAvailability {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  isPrepaid      Boolean?
  isCash         Boolean?
  isCod          Boolean? // cash on develivery
  isOda          Boolean? //Out of Delivery  Area
  maxWeight      Float?
  maxAmount      Float?
  remarks        String?
  center         Json?
  pincode        Int?
  Pincode        Pincode?       @relation(fields: [pincode], references: [pincode])
  courierId      String         @db.ObjectId
  courierPartner CourierPartner @relation(fields: [courierId], references: [id])
}

model CourierPartner {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String                @unique
  isActive           Boolean               @default(true) // Active or inactive
  // host               String
  // authConfig         AuthConfig
  rateCard           PartnerRateCard[]
  codCharges         CODCharges? // Optional in case COD not applicable
  extraCharges       ExtraCharges[]
  // apiConfigs         ApiConfig[]
  pincodeAvailablity PincodeAvailability[]
  Order              Order[]
  PickupProvider     PickupProvider[]
}

type PartnerRateCard {
  title     String
  mode      ShippingMode @map("mode")
  type      String       @map("type")
  base      String
  increment String
  unit      Unit         @default(Kg)
  upto      String?
  rates     Rate[]
}

enum Unit {
  Kg
  Gram
}

type Rate {
  zone          Zone
  baseRate      String
  incrementRate String
}

type TaxCharges {
  name       String // Tax type (e.g., "GST", "VAT")
  percentage String // Tax percentage
  type       String
}

type ExtraCharges {
  name       String
  percentage String
  type       String
}

type CODCharges {
  minimum    String
  percentage String
}

enum AuthSecretType {
  QUERY
  BEARER
}

type AuthConfig {
  type    AuthSecretType
  keyName String
  value   String
  headers Json[]         @default([])
}

// model ApiConfig {
//   id             String         @id @default(auto()) @map("_id") @db.ObjectId
//   type           ApiType
//   endpoint       String
//   method         String
//   sequence       Int            @default(1)
//   requestMapping MapperType?
//   responseMapper MapperType?
//   beforeActions  ActionType[]
//   afterActions   ActionType[]
//   courierPartner CourierPartner @relation(fields: [courierId], references: [id])
//   courierId      String         @db.ObjectId
// }

// type ActionType {
//   source        SourceType
//   apiType       ApiType?
//   evalMapper    String?
//   payloadMapper String?
//   name          String
// }

// enum SourceType {
//   Internal
//   External
// }

// type MapperType {
//   evalRunner String?
//   mapping    String?
// }

// enum ApiType {
//   PincodeServicebility
//   CreateWarehouse
//   Order
//   Tracking
//   Pickup
// }

model Counter {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  name  CounterType @unique
  value Int
}

enum CounterType {
  AWB
}
